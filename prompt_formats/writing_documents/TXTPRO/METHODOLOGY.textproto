license {
  name: "CC BY-SA 4.0"
  url: "https://creativecommons.org/licenses/by-sa/4.0/"
  attribution: "Disciplined AI Software Development Methodology © 2025 by Jay Baleine"
  public_sharing_requirement: "Include full attribution above"
  distribution_modification_requirement: "Full CC BY-SA 4.0 compliance required"
  attribution_requirement: "When sharing content publicly (repositories, documentation, articles): Include the full attribution above"
  attribution_requirement: "When working with AI systems (ChatGPT, Claude, etc.): Attribution not required during collaboration sessions"
  attribution_requirement: "When distributing or modifying the methodology: Full CC BY-SA 4.0 compliance required"
}

title: "Project Documentation Methodology"

foundational_philosophy: "Architectural Minimalism with Deterministic Reliability: Every line of code must earn its place through measurable value. Build systems that work predictably in production, not demonstrations of sophistication."

separation_of_concerns_rule: "Each module has single, well-defined responsibility"
separation_of_concerns_rule: "Strict modular boundaries with clear interfaces"
separation_of_concerns_rule: "Recognize when separation would harm rather than help architecture"
separation_of_concerns_rule: "Centralized main entry points with modular project layout"

deterministic_operations_rule: "Synchronous, predictable behavior over async complexity"
deterministic_operations_rule: "Long-runtime stability over cutting-edge patterns"
deterministic_operations_rule: "Production stability over development convenience"
deterministic_operations_rule: "Cross-platform considerations in design decisions"

performance_driven_rule: "Choose based on workload requirements, not popular trends"
performance_driven_rule: "Apply optimizations only to proven bottlenecks with measurable impact"
performance_driven_rule: "Avoid premature optimization that clutters codebase"
performance_driven_rule: "Maintain performance baselines and regression detection"

code_quality_rule: "Files never exceed 150 lines (split into separate modules if needed)"
code_quality_rule: "Self-explanatory code without comments"
code_quality_rule: "Preserve readability and maintainability as primary concerns"
code_quality_rule: "KISS and DRY principles expertly applied"
code_quality_rule: "Reuse existing functions before creating new ones"

error_handling_rule: "Robust without over-engineering"
error_handling_rule: "Implement what's necessary for production reliability"
error_handling_rule: "Avoid handling every possible edge case"
error_handling_rule: "Graceful failure modes and resource cleanup"

feature_control_rule: "Resist feature bloat and complexity creep"
feature_control_rule: "Every addition must serve core project purpose"
feature_control_rule: "Surgical approach: target exact problem with minimal code"
feature_control_rule: "Multi-language use only when justified by measurable gains"

web_development_rule: "No inlining: Styles to separate files, handlers to named functions, configurations as constants"
web_development_rule: "File size accommodation: Components ≤250 lines (DOM complexity), modules ≤150 lines"
web_development_rule: "Async operations: API calls, user interactions, data fetching only"
web_development_rule: "Error boundaries: Network operations, user inputs, third-party integrations"
web_development_rule: "File colocation: Component.jsx, Component.module.css, Component.test.js"
web_development_rule: "Component splitting: Multiple purposes or testing difficulty"
web_development_rule: "Implementation protocol: Request architectural compliance clarification for code generation tasks"

phase0_title: "Basic Must-Haves (Phase 0 - Always First)"
phase0_description: "Every project, regardless of size, must establish these foundational systems before any feature development"

benchmarking_requirement: "Core Framework: Performance measurement with component isolation"
benchmarking_requirement: "Regression Detection: Compare against previous results, fail on performance drops"
benchmarking_requirement: "Baseline Management: Save and track performance baselines over time"
benchmarking_requirement: "JSON Output: Structured data for automated analysis and CI integration"
benchmarking_requirement: "Timeline Tracking: Historical performance data across project evolution"

cicd_requirement: "Release Workflows: Automated versioning, building, and deployment"
cicd_requirement: "Regression Detection: Benchmark comparison on every commit/PR"
cicd_requirement: "Quality Gates: Block merges that fail performance or quality thresholds"
cicd_requirement: "Automated Testing: Run full test suite on code changes"

core_architecture_requirement: "Centralized Entry Points: Single main module that orchestrates everything"
core_architecture_requirement: "Configuration Management: Externalized settings with validation"
core_architecture_requirement: "Centralized Logging: Error handling and diagnostic output with JSON integration"
core_architecture_requirement: "Dependency Injection: Clean separation and testable components"

testing_requirement: "Test Suite: Unit and integration tests for all components"
testing_requirement: "Stress Testing: Load and boundary condition validation"
testing_requirement: "Test Data Management: Reproducible test scenarios and cleanup"
testing_requirement: "Coverage Tracking: Ensure adequate test coverage before releases"

documentation_requirement: "Automated Generation: Extract documentation from code and structure"
documentation_requirement: "Architecture Documentation: System design and component relationships"
documentation_requirement: "API Documentation: Interface specifications and usage examples"
documentation_requirement: "Performance Documentation: Benchmark results and optimization guides"

critical_note: "These systems must be operational before writing any application logic. They become the foundation that enables rapid, confident development."

step1_name: "Project Decomposition"
step1_question: "What does \"finished\" look like?"
step1_question: "What are the major pieces that need to exist?"
step1_question: "What depends on what?"
step1_question: "Where are the natural stopping points?"
step1_approach: "Create sections based on dependencies: Major Piece A → Major Piece B → Major Piece C with corresponding sub-tasks"

step2_name: "Phase Creation"
step2_mandatory_item: "Benchmarking suite with regression detection"
step2_mandatory_item: "GitHub workflows for releases and quality gates"
step2_mandatory_item: "Test infrastructure (unit + stress testing)"
step2_mandatory_item: "Documentation generation system"
step2_mandatory_item: "Centralized architecture setup"
step2_grouping_criterion: "Dependency chains: Things that must happen in sequence"
step2_grouping_criterion: "Logical groupings: Related functionality that makes sense together"
step2_grouping_criterion: "Natural checkpoints: Places where you can validate progress"

step3_name: "Task Breakdown"
step3_requirement: "Specific action: What exactly needs to be done"
step3_requirement: "Output: What will exist when complete"
step3_requirement: "Success criteria: How to verify completion"
step3_requirement: "Integration points: How it connects to other work"

step4_name: "Progress Tracking System"
step4_status_completed: "Done and validated"
step4_status_blocked: "Cannot proceed due to dependency"
step4_status_ready: "Dependencies met, can start"
step4_status_uncertain: "Need clarification or decision"

step5_name: "Quality Gates"
step5_criterion: "Does the output match what was specified?"
step5_criterion: "Can the next phase actually use this output?"
step5_criterion: "Is there enough documentation for future reference?"
step5_criterion: "Are there any obvious issues that need fixing?"

architectural_checkpoint: "SoC VALIDATION: Each module single responsibility, clear boundaries"
architectural_checkpoint: "DETERMINISTIC BEHAVIOR: Synchronous operations, predictable outcomes"
architectural_checkpoint: "FILE SIZE COMPLIANCE: All files ≤150 lines or properly modularized"
architectural_checkpoint: "DRY ENFORCEMENT: No duplicate code, existing functions reused"
architectural_checkpoint: "KISS VALIDATION: Minimal complexity, surgical implementations"
architectural_checkpoint: "CONFIG CENTRALIZATION: No hardcoded values outside constants"
architectural_checkpoint: "PERFORMANCE INTEGRATION: Benchmarks operational, gates passing"
architectural_checkpoint: "PRODUCTION READINESS: Error handling, resource cleanup, cross-platform"

quality_gate: "Self-explanatory naming, no comments needed"
quality_gate: "Performance characteristics match workload requirements"
quality_gate: "Every addition serves core project purpose"
quality_gate: "Regression detection prevents performance degradation"
quality_gate: "Resource utilization within defined thresholds"

progression_blocker: "Any failed checkpoint blocks phase advancement"

during_development_validation: "INCREMENTAL COMPLIANCE: Check after each significant change"
during_development_validation: "BENCHMARK INTEGRATION: New components measured immediately"
during_development_validation: "DEPENDENCY ALIGNMENT: Imports match architectural boundaries"
during_development_validation: "EDGE CASE HANDLING: Document but don't implement without plan"
during_development_validation: "FEATURE CREEP CHECK: Question necessity of each addition"

before_phase_completion_validation: "FULL ARCHITECTURE AUDIT: All principles systematically verified"
before_phase_completion_validation: "PERFORMANCE REGRESSION: Compare against established baselines"
before_phase_completion_validation: "INTEGRATION VALIDATION: Components work within system boundaries"
before_phase_completion_validation: "PRODUCTION SIMULATION: Test under realistic deployment constraints"

validate_phase_function: "Check file sizes (fail if >150 lines)"
validate_phase_function: "Scan for hardcoded values outside config"
validate_phase_function: "Validate import dependencies match architecture"
validate_phase_function: "Run benchmark suite and check gates"
validate_phase_function: "Generate compliance report"

dry_audit_function: "Detect duplicate function implementations"
dry_audit_function: "Find unused imports and functions"
dry_audit_function: "Identify constants that should be centralized"
dry_audit_function: "Flag potential separation of concerns violations"

cicd_workflow_function: "Run validation on every commit"
cicd_workflow_function: "Block merges that fail compliance checks"
cicd_workflow_function: "Generate performance regression reports"
cicd_workflow_function: "Maintain baseline measurements over time"

file_module_constraint: "Each file ≤ 150 lines or properly split"
file_module_constraint: "Module serves single, clear purpose"
file_module_constraint: "No redundant code between modules"
file_module_constraint: "Existing functions reused before creating new ones"
file_module_constraint: "Naming conventions consistent across codebase"

architecture_validation_constraint: "Centralized configuration used throughout"
architecture_validation_constraint: "Constants referenced, no magic numbers"
architecture_validation_constraint: "Modular separation maintained with clear boundaries"
architecture_validation_constraint: "Dependencies align with separation of concerns"
architecture_validation_constraint: "Synchronous operations preferred over async complexity"

performance_integration_constraint: "Benchmarking suite integrated with all modules"
performance_integration_constraint: "Regression detection operational"
performance_integration_constraint: "JSON output for automated analysis"
performance_integration_constraint: "Performance gates defined and enforced"
performance_integration_constraint: "Timeline tracking for historical comparison"

production_readiness_constraint: "Cross-platform deployment considerations"
production_readiness_constraint: "Real-world constraints addressed"
production_readiness_constraint: "Resource cleanup on shutdown"
production_readiness_constraint: "Deterministic behavior under load"
production_readiness_constraint: "Error handling appropriate for production"

single_file_guideline: "Apply SoC within functions (input, processing, output)"
single_file_guideline: "Benchmark core operation even if simple"
single_file_guideline: "Validate against 150-line limit"
single_file_guideline: "Self-explanatory function and variable names"

small_application_guideline: "Strict modular boundaries with clear interfaces"
small_application_guideline: "Centralized configuration and constants"
small_application_guideline: "Synchronous operations with predictable flow"
small_application_guideline: "Performance baseline establishment"

production_system_guideline: "Full architectural compliance with all principles"
production_system_guideline: "Comprehensive benchmarking and regression detection"
production_system_guideline: "Cross-platform deployment considerations"
production_system_guideline: "Production-grade error handling and resource management"

multi_language_guideline: "Each language justified by measurable performance gains"
multi_language_guideline: "Maintain architectural principles across language boundaries"
multi_language_guideline: "Unified benchmarking system for all components"
multi_language_guideline: "Consistent error handling patterns across languages"

web_development_adaptation: "No Inlining: Styles to separate files, handlers to named functions, configs as constants"
web_development_adaptation: "File Size Exemption: Components ≤250 lines (DOM complexity), modules ≤150 lines"
web_development_adaptation: "Async Permitted: API calls, user interactions, data fetching only"
web_development_adaptation: "Error Boundaries: Network ops, user inputs, third-party integrations"
web_development_adaptation: "File Colocation: Component.jsx, Component.module.css, Component.test.js"
web_development_adaptation: "Component Splitting: Multiple purposes or testing difficulty"

technical_indicator: "All architectural principles consistently applied across codebase"
technical_indicator: "Performance baselines maintained throughout development lifecycle"
technical_indicator: "Zero production incidents related to architectural violations"
technical_indicator: "File size constraints adhered to without compromising functionality"

operational_indicator: "System uptime and reliability under production load"
operational_indicator: "Predictable resource utilization patterns"
operational_indicator: "Graceful degradation under stress conditions"
operational_indicator: "Maintainability preserved as codebase grows"

development_indicator: "Enforcement checkpoints prevent architectural drift"
development_indicator: "Performance regression detection catches optimizations and degradations"
development_indicator: "Code review efficiency improved through systematic validation"
development_indicator: "Technical debt accumulation prevented through continuous compliance"

documentation_quality_indicator: "Enforcement checkpoints prevent architectural drift"
documentation_quality_indicator: "Quality gates block progression with incomplete work"
documentation_quality_indicator: "Automated validation catches compliance violations"
documentation_quality_indicator: "Performance baselines maintained throughout development"

project_execution_indicator: "Systematic validation prevents technical debt accumulation"
project_execution_indicator: "Architectural principles consistently applied across codebase"
project_execution_indicator: "Performance characteristics predictable and measurable"
project_execution_indicator: "Production readiness verified at each phase"

conclusion: "This methodology enforces discipline through automated checking and explicit validation points, preventing the gradual erosion of architectural principles during development."